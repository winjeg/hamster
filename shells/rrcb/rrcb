#!/bin/bash

# run a command with expected result....
# the first argument is the command, the second is the expectation
function exec_remote_cmd() {
/usr/bin/expect  <<-EOF
    #exp_internal 1
    set argc 0
    set silent 0
    set nopass 0
    set timeout -1
    spawn ssh $user@$host
    expect {
    	"continue" { send "yes\r"; exp_continue }
    	"password:" { send "$passwd\r" }
    }
    expect {
        default { send_user "\nFailed to connect to the host\n"; exit 0 }
        "*\$ " { send_user "\n" }
    }
    send "sudo $1\r"
    expect {
        "password for $user:" {
            send "$passwd\r"
            sleep 1
            expect {
                -nocase "$2" {
                    send "\003";
                    send "\r"
                }
                default {
                    exit 1
                }
            }
        }
        default {
            expect {
                "$2" {
                    send "\003";
                    send "\r"
                }
                default {
                    exit 1
                }
            }
        }
    }
    send "exit\r"
    expect eof
EOF
}

# cp a file the first argument is the file to be copied
function cp_file() {
/usr/bin/expect  <<-EOF
    #exp_internal 1
    set argc 0
    set silent 0
    set nopass 0
    set timeout -1
    spawn scp $1 $user@$host:
    expect {
    	-re "continue" { send "yes\r"; exp_continue }
    	-re "password:" { send "$passwd\r"; exp_continue }
    }
    expect "100%"
    sleep 1
EOF
}

function print_red() {
    echo -e "\e[91m$1\033[0m"
}


function print_green() {
    echo -e "\e[92m$1\033[0m"
}

function print_yellow() {
    echo -e "\e[93m$1\033[0m"
}

function print_blue() {
    echo -e "\e[96m$1\033[0m"
}

function print_purple() {
    echo -e "\e[95m$1\033[0m"
}

function read_ini()     
{     
    # determin the parameters num    
    if [ $# -lt 2 ];then     
    echo 'Usage:ini <filename> <[section]> [<key>] [<newvalue>]'     
    _exit     
    fi
    # read variables from an ini file
    _old=`cat $1`
    # if the third parameter is empty show all the values below the section    
    if [ "$3" = "" ];then     
       sed -n "/\[$2\]/,/\[.*\]/{     
           /^\[.*\]/d     
           /^[ ]*$/d     
           s/;.*$//     
           p     
           }" $1
    # if the fourth parameters is empty show its value
    elif [ "$4" = "" ];then     
       sed -n "/\[$2\]/,/\[.*\]/{     
           /^\[.*\]/d     
           /^[ ]*$/d     
           s/;.*$//     
           s/^[ |    ]*$3[|    ]*=[ |    ]*\(.*\)[ |    ]*/\1/p     
           }" $1     
    else     
    # if the fourth parameter is sharp, delete the line
       if [ "$4" = "#" ];then     
       sed -i "/\[$2\]/,/\[.*\]/{     
           s/^[ |    ]*$3[ |    ]*=.*/ /     
           }" $1     
       else
    # if the fourth parameter is not empty and '#' modify
       sed -i "/\[$2\]/,/\[.*\]/{    
           s/^[ |    ]*$3[ |    ]*=.*[ |    |.*]/$3=$4            /     
           #s/^[ |    ]*$3[ |    ]*=[a-zA-Z0-9]*.[0-9]*.[0-9]*.[0-9]*/$3=$4/     
           }" $1
    # reread the ini file
    _new=`cat $1`
    # judge has changed
           if [ "$_new" = "$_old" ];then     
    # if not successful use the below command to modify     
           sed -i "/\[$2\]/,/\[.*\]/{     
           s/^[ |      ]*$3[ |    ]*=.*/$3=$4/     
           #s/^[ |     ]*$3[ | ]*=[a-zA-Z0-9]*.[0-9]*.[0-9]*.[0-9]*/$3=$4/     
           }" $1     
           fi     
       fi     
    fi     
}

function cleanup(){
	echo
	print_purple "[Info] The program had been intrrupted, Cleaning up temp files"
	if [ -f *.tmpf.dec ]; then
		rm *.tmpf.dec
	fi
	print_purple "[Info] Cleaning finished"
}

trap "{ cleanup;  }" 1 2 3 6 9 15

if [ $1 = "-d" ]; then
    openssl enc -aes-128-ecb -d -in $2 -out $3
elif [ $1 = "-e" ]; then
    openssl enc -aes-128-ecb -e -in $2 -out $3
elif [ $1 = "-h" ]; then
    echo "The usage is:"
    echo "deploy -d encryptedfile decryptedfile"
    echo "deploy -e decryptedfile encryptedfile"
    echo "deploy xxx.conf password silent/nosilent"
    echo "silent -> automatically finish all operations"
    echo "nosilent -> each server needs a confirm"
else
    CONF_FILE=$1
    DEC_PASSWD=$2
    DEC_FILE="`date +%s-%N`.tmpf.dec"
    passwd='password'
    host='ipaddress'
    user='username'
    openssl enc -aes-128-ecb -d -in $CONF_FILE -out $DEC_FILE -k $DEC_PASSWD

    #deal with arguments here
    if [ -n "$3" ]; then
        if [ "$3" = "nosilent" ]; then
            SILENT=$3
            if [ -n "$4" ]; then
                EXTRA_ARG=$4
            fi
        else
            if [ -n "$4" ]; then
                if [ "$4" = "nosilent" ]; then
                    SILENT=$4
                    EXTRA_ARG=$3
                else
                    SILENT=$3
                    EXTRA_ARG=$4
                fi
            else
                EXTRA_ARG=$3
            fi
        fi
    fi

    print_blue  "[NOTI] The command must be continious, range 1-10000"
    #----------------------------------------------------
    sections=$(cat $DEC_FILE  | grep -o -P '(?<=\[).*(?=\])')
    for i in $sections;
    do
        print_yellow "Current section is: [${i}]"
        host=`read_ini $DEC_FILE $i ip`
        user=`read_ini $DEC_FILE $i user`
        passwd=`read_ini $DEC_FILE $i password`
            for m in `seq 1 10000`;
            do
                file=`read_ini $DEC_FILE $i "file_${m}"`
                if [ -n "$file" ]; then
                    echo "copying file: $file"
                    cp_file $file
                fi
                cmd="`read_ini $DEC_FILE $i \"cmd_${m}\"`"
                if [ -n "${EXTRA_ARG}" ]; then
                    cmd="${cmd//\{arg\}/${EXTRA_ARG}}"
                fi
                cmd_exp="`read_ini $DEC_FILE $i \"cmd_${m}_exp\"`"
                if [ ! -n "$cmd_exp" ]; then
                     cmd_exp="*"
                fi
                # if the cmd exists
                if [ -n "$cmd" ]; then
                    print_yellow "[INFO] The command on [$host] is : $cmd"
                    print_yellow "[INFO] The expectation of [$cmd] is : $cmd_exp"
                    exec_remote_cmd "$cmd"  "$cmd_exp"
                    if [ $? = "0" ]; then
                        print_green "<<<<<< success >>>>>>"
                    else
                        print_red "<<<<<<< fail >>>>>>>>"
                        exit 1
                    fi
                ##### if don't exits the command
                else
                    last_idx=`expr $m - 1`
                    print_blue "Last cmd executed is:[cmd_${last_idx}]"
                    break;
                fi
            done
        if [ -n "$SILENT" ]; then
            if [ $SILENT = "nosilent" ]; then
                print_purple "Press <Enter> to continue..."
                read anything
            fi
        fi
    done
    rm $DEC_FILE
fi